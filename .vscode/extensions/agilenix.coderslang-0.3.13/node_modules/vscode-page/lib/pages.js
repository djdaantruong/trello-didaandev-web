"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vscode = require("vscode");
const fs = require("fs");
const path = require("path");
const handlebars = require("handlebars");
const currentPanels = new Map();
const initJS = `
function initEventListener(fn) {
  window.addEventListener('message', event => {
    const message = event.data;
    if (message.command.match(/Response$/) && message.contents) {
      message.contents.forEach(content => {
        let element = document.getElementById(content.id);
        element.innerHTML = content.body;
      });
    } else {
      if (fn) {
        fn(message);
      }
    }
  });
}
`;
function createOrShowPage(name, viewType, title, base, page, context, messageMappings) {
    let panel = currentPanels.get(name);
    if (panel) {
        panel.reveal();
    }
    else {
        let rootString = path.join(context.extensionPath, base);
        let localResourceRoots = vscode.Uri.file(path.join(rootString, "/")).with({
            scheme: "vscode-resource"
        });
        panel = vscode.window.createWebviewPanel(viewType, title, vscode.ViewColumn.One, {
            enableScripts: true,
            retainContextWhenHidden: true,
            localResourceRoots: [localResourceRoots]
        });
        const pagePath = path.join(rootString, page);
        panel.webview.html = fs
            .readFileSync(pagePath, "utf-8")
            .replace("{{base}}", localResourceRoots.toString())
            .replace('"{{init}}"', initJS);
        panel.webview.onDidReceiveMessage(createDispatch(messageMappings, panel, context));
        panel.onDidDispose(() => currentPanels.delete(name), undefined, context.subscriptions);
        currentPanels.set(name, panel);
    }
}
exports.createOrShowPage = createOrShowPage;
function createDispatch(messageMappings, currentPanel, context) {
    let handler = (message) => {
        const mapping = messageMappings.find(mapping => mapping.command === message.command);
        if (mapping) {
            let response = { command: `${message.command}Response` };
            mapping.handler.call(null, message.parameters).then(result => {
                if (mapping.templates) {
                    response.contents = [];
                    mapping.templates.forEach(template => {
                        var _a, _b;
                        if (template.content) {
                            (_a = response.contents) === null || _a === void 0 ? void 0 : _a.push({
                                id: template.id,
                                body: handlebars.compile(template.content)(result)
                            });
                        }
                        else if (template.contentUrl) {
                            (_b = response.contents) === null || _b === void 0 ? void 0 : _b.push({
                                id: template.id,
                                body: handlebars.compile(fs
                                    .readFileSync(path.join(context.extensionPath, template.contentUrl))
                                    .toString())(result)
                            });
                        }
                    });
                }
                else if (mapping.forward) {
                    return handler.call(null, {
                        command: mapping.forward,
                        parameters: result
                    });
                }
                else {
                    response.result = result;
                }
                currentPanel.webview.postMessage(response);
            });
        }
        else {
            vscode.window.showErrorMessage(`Can not find a handler for ${message.command}.`);
        }
    };
    return handler;
}
//# sourceMappingURL=pages.js.map